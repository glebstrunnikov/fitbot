import {
  createBaseEx,
  deleteBaseEx,
  getBaseExByName,
  getBaseExList,
  getEx,
  getUserData,
  initialInsert,
  updateData,
  updateMode,
} from './queries.mjs';

const onText = async (bot, msg, list, keyboards) => {
  // –í—ã–¥–µ—Ä–≥–∏–≤–∞–µ–º –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
  const { text } = msg;
  const chat = msg.chat.id;
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ —Ç–∞–º –ø—É—Å—Ç–æ - –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º –ø—É—Å—Ç—É—é –∑–∞–≥–æ—Ç–æ–≤–∫—É –∏ —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∞–µ–º
  const exList = await getBaseExList();
  console.log(await getUserData(chat).length);
  if ((await getUserData(chat).length) === undefined && text === '/start') {
    bot.sendMessage(
      chat,
      '–ö–∞–∂–µ—Ç—Å—è, –≤—ã —É –Ω–∞—Å –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑. –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n–ò—Ç–∞–∫, –≤–æ—Ç —á—Ç–æ —è –º–æ–≥—É –≤–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å\n',
      keyboards.base,
    );
    await initialInsert(chat);
    return;
  }

  const userData = await getUserData(chat);
  const week = JSON.parse(userData[0].user_data);

  // –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤ –±–∞–∑—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –¥–æ–≤–æ–ª—å–Ω–æ –∫–æ—Å—Ç—ã–ª—å–Ω—ã–º –º–µ—Ç–æ–¥–æ–º, –ø–æ—Ç–æ–º—É —á—Ç–æ –∫–Ω–æ–ø–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å—Ç–∞–≤–∏—Ç—å –Ω–µ–ª—å–∑—è, –∞ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±—ã –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
  if (/^\/video_\d+$/.test(text)) {
    const exId = text.replaceAll(/\/video_/g, '');
    const currentEx = exList.find((ex) => ex.base_ex_id == exId);
    bot.sendVideo(
      chat,
      currentEx.video_id,
      keyboards.escape('–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è', 'show_exes'),
    );
  }
  // mode - —Ä–µ–∂–∏–º, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞ –Ω–∞—Ö–æ–¥–∏–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏—Å—Ö–æ–¥—è –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, –Ω–∞–¥–æ —Ä–µ—à–∞—Ç—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.
  const mode = userData[0].user_mode;
  switch (mode) {
    case 'create_ex': {
      // –≤ —ç—Ç–æ–º –∏ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Å–ª—É—á–∞—è—Ö –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –Ω–∞ —Ä–µ–≥—ç–∫—Å–ø–∞—Ö. –¢—É—Ç –æ–Ω –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ª–∏–±–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –ª–∏–±–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ—á–∫–∏
      if (!/^.+\n.+$/.test(text) && !/^.+$/.test(text)) {
        bot.sendMessage(
          chat,
          '–í—ã –æ—à–∏–±–ª–∏—Å—å —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
        );
        break;
      }
      await createBaseEx(text.split('\n')[0], text.split('\n')[1] ?? '');
      const currentEx = await getBaseExByName(text.split('\n')[0]);
      // –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–æ—á–∫–∞ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–º–µ–Ω, –Ω–∞–¥–æ –≤—ã–ø–∏–ª–∏–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏. –î–æ—Ä–∞–±–æ—Ç–∞—Ç—å
      updateMode(`create_ex_${currentEx[0].base_ex_id}`, chat);
      bot.sendMessage(
        chat,
        `–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –µ—Å—Ç—å`,
        keyboards.createEx,
      );
      break;
    }
    case 'delete_ex': {
      if (!/\d+/.test(text)) {
        bot.sendMessage(
          chat,
          '–í—ã –æ—à–∏–±–ª–∏—Å—å —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
        );
        break;
      }
      const exIdToDelete = exList[Number(text - 1)].base_ex_id;
      await deleteBaseEx(exIdToDelete);
      bot.sendMessage(
        chat,
        `–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ. –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: ${await list.ex(1)}`,
        keyboards.base,
      );
      break;
    }
    case 'delete_day': {
      if (!/^–î–µ–Ω—å \d\d?$/.test(text)) {
        bot.sendMessage(
          chat,
          '–í—ã –æ—à–∏–±–ª–∏—Å—å —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
        );
        break;
      }
      const dayToDelete = Number(text.replaceAll(/^.*\s/g, '')) - 1;
      await updateData(chat, week, (data) => {
        data.days.splice(dayToDelete, 1);
        return data;
      });
      await bot.sendMessage(chat, '–î–µ–Ω—å —É–¥–∞–ª–µ–Ω', keyboards.rm);
      bot.sendMessage(
        chat,
        `–í–æ—Ç –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π: \n\n${await list.allDays(chat)}`,
        keyboards.base,
      );
      break;
    }
    case 'edit_day': {
      if (!/^–î–µ–Ω—å \d\d?$/.test(text)) {
        bot.sendMessage(
          chat,
          '–í—ã –æ—à–∏–±–ª–∏—Å—å —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
        );
        break;
      }
      const dayToEdit = Number(text.replaceAll(/^.*\s/g, ''));
      await updateMode(`edit_day_${dayToEdit}`, chat);
      await bot.sendMessage(
        chat,
        `–í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –¥–µ–Ω—å ${dayToEdit}`,
        keyboards.rm,
      );
      bot.sendMessage(
        chat,
        `${await list.day(chat, dayToEdit, 2)}`,
        keyboards.editDay(dayToEdit),
      );
      break;
    }
    default:
      {
        const reAddExDayNo = /^add_ex_day_\d$/;
        if (reAddExDayNo.test(mode)) {
          const reOneToFourDidgits = /^(\d\d?\n?)(\d\d?\n)?(\d\d?\n)?(.+?)?$/;
          if (!reOneToFourDidgits.test(text)) {
            bot.sendMessage(
              chat,
              '–í—ã –æ—à–∏–±–ª–∏—Å—å —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
            );
            break;
          }
          const dayNo = mode.replaceAll(/add_ex_day_/g, '');
          const payload = text.split('\n');

          await updateData(chat, week, (data) => {
            data.days[dayNo - 1].push({
              base_ex_id: exList[payload[0] - 1].base_ex_id,
              sets: payload[1] ?? '',
              times: payload[2] ?? '',
              weight: payload[3] ?? '',
              comment: payload[4] ?? '',
            });
            return data;
          });
          bot.sendMessage(
            chat,
            `–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –¥–µ–Ω—å. –¢–µ–ø–µ—Ä—å –¥–µ–Ω—å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:\n\n${await list.day(
              chat,
              dayNo,
              2,
            )}\n\n–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Ç–∞–∫–∏–º –∂–µ —Å–ø–æ—Å–æ–±–æ–º: –Ω–æ–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤, –≤–µ—Å (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å). –ö–∞–∂–¥–æ–µ - —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –ò–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n\n${await list.ex(
              1,
            )}`,
            keyboards.escape(),
          );
        }
      }
      {
        const reDeleteExDayNo = /^delete_ex_day_\d$/;
        if (reDeleteExDayNo.test(mode)) {
          if (!/^\d: .+/.test(text)) {
            bot.sendMessage(
              chat,
              '–í—ã –æ—à–∏–±–ª–∏—Å—å —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
            );
            break;
          }
          const dayNo = mode.replaceAll(/delete_ex_day_/g, '');
          const exIdToDelete = Number(text.replaceAll(/:.*$/g, '')) - 1;
          await updateData(chat, week, (data) => {
            data.days[dayNo - 1].splice(exIdToDelete, 1);
            return data;
          });
          await bot.sendMessage(
            chat,
            '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –¥–Ω—è',
            keyboards.rm,
          );
          bot.sendMessage(
            chat,
            `–¢–µ–ø–µ—Ä—å –¥–µ–Ω—å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:\n\n${await list.day(chat, dayNo, 2)}`,
            keyboards.editDay(dayNo),
          );
        }
      }
      {
        const reWorkoutNoNo = /^workout_\d_\d$/;
        if (reWorkoutNoNo.test(mode)) {
          const reOneToThreeDidgitsAndComment =
            /^(\d\d?\n)(\d\d?\n)?(\d\d?\n)?(.+?)?$/;
          if (!reOneToThreeDidgitsAndComment.test(text)) {
            bot.sendMessage(
              chat,
              '–í—ã –æ—à–∏–±–ª–∏—Å—å —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
            );
            break;
          }
          const exNo = mode.replaceAll(/^workout_\d_/g, '');
          const dayNo = mode.replaceAll(/^workout_/g, '')[0];
          const newData = text.split('\n');
          await updateData(chat, week, (data) => {
            data.days[dayNo - 1][exNo - 1].sets = newData[0];
            data.days[dayNo - 1][exNo - 1].times = newData[1];
            if (newData[2]) {
              data.days[dayNo - 1][exNo - 1].weight = newData[2];
            }
            if (newData[3]) {
              data.days[dayNo - 1][exNo - 1].comment = newData[3];
            }
            return data;
          });
          const day = week.days[dayNo - 1];
          const ex = await getEx(week, exList, dayNo, exNo);

          updateMode(`workout_${dayNo}_${exNo}`, chat);
          bot.sendMessage(
            chat,
            `–ó–∞–ø–∏—Å–∞–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å, —É—Ä–∞! üí™\n\n${ex.name}\n\n${
              day[exNo - 1].sets
            } –ø–æ–¥—Ö–æ–¥–æ–≤ –ø–æ ${day[exNo - 1].times} —Ä–∞–∑${
              day[exNo - 1].weight ? ` —Å –≤–µ—Å–æ–º ${day[exNo - 1].weight}` : ''
            }${
              day[exNo - 1].comment
                ? `\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${day[exNo - 1].comment}`
                : ''
            }\n\n–ß—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤, –ø–æ–≤—Ç–æ—Ä–æ–≤, –≤–µ—Å –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–≤—Å–µ ‚Äî —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)`,
            keyboards.ex(`workout_${dayNo}`),
          );
        }
      }
      break;
  }
};

export default onText;
