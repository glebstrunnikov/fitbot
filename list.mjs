import { getBaseExList, getUserData } from './queries.mjs';

const list = {
  // —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π. –í—ã–¥–∞–µ—Ç—Å—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö - —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è, —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏, —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è –≤—ã–¥–∞—á–∏ –≤–∏–¥–µ–æ
  ex: async (length) => {
    const exList = await getBaseExList();
    let result;
    switch (length) {
      case 1:
        result = exList.map((el, i) => `${i + 1}: ${el.name};\n`).join('');
        break;
      case 2:
        result = exList
          .map(
            (el, i) => `${i + 1}: ${el.name}.\n–û–ø–∏—Å–∞–Ω–∏–µ: ${el.description}\n`,
          )
          .join('');
        break;
      case 3:
        result = exList
          .map(
            (el, i) =>
              `${i + 1}: ${el.name}.\n${
                el.description ? `–û–ø–∏—Å–∞–Ω–∏–µ: ${el.description}\n` : ''
              }${el.video_id ? `–í–∏–¥–µ–æ: /video_${el.base_ex_id}\n` : ''}`,
          )
          .join('');
        console.log(result);
        break;
      default:
        result = '–û—à–∏–±–∫–∞: –≤—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä length –≤ —Å–ø–∏—Å–∫–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π';
        break;
    }
    return `–°–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:\n\n${result}`;
  },

  day: async (user, dayNo, length) => {
    const exList = await getBaseExList();
    // –¥–æ–±–∞–≤–∏—Ç—å –±–∞–≥—Ñ–∏–∫—Å –Ω–∞ –ø—É—Å—Ç—ã–µ –¥–Ω–∏
    const userData = await getUserData(user);
    const day = JSON.parse(userData[0].user_data).days[dayNo - 1];
    let result = `–î–µ–Ω—å ${dayNo}:\n`;
    if (day.length === 0) {
      result += 'ü§∑‚Äç‚ôÇÔ∏è–ü—É—Å—Ç–æ!\n';
    }

    for (const ex in day) {
      if (Object.hasOwn(day, ex)) {
        const currentEx = exList.find(
          (el) => el.base_ex_id === day[ex].base_ex_id,
        );
        if (!currentEx) {
          return '–û—à–∏–±–∫–∞, —Ç–∞–∫–æ–≥–æ ID —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';
        }
        result += `üéØ${currentEx.name}\n`;
        if (length > 1) {
          if (day[ex].sets) {
            result += `${day[ex].sets} –ø–æ–¥—Ö–æ–¥–æ–≤`;
          }
          if (day[ex].times) {
            result += ` –ø–æ ${day[ex].times} —Ä–∞–∑`;
          }
          if (day[ex].weight) {
            result += ` —Å –≤–µ—Å–æ–º ${day[ex].weight}`;
          }
          if (day[ex].sets) {
            result += '.\n';
          }
        }
      }
    }

    return result;
  },

  allDays: async (user) => {
    const userData = await getUserData(user);

    if (!userData[0].user_data) {
      return '–î–Ω–∏ –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã';
    }
    const week = JSON.parse(userData[0].user_data).days;
    const result = [];
    for (let i = 0; i < week.length; i += 1) {
      result.push(list.day(user, i + 1, 1));
    }
    return (await Promise.all(result)).join('');
  },
};

export default list;
